name: Deploy Manor

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '22'

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    if: github.ref_name == 'main'
    environment: production
    
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-Deploy-Manor
          aws-region: us-east-1

      - name: Install dependencies (excluding iOS)
        run: |
          echo "üì¶ Installing dependencies excluding iOS package..."
          # Install dependencies for specific workspaces (iOS is automatically excluded)
          npm install --workspace=@manor/cdk --workspace=@manor/website --workspace=@manor/public-website
          echo "‚úÖ Dependencies installed successfully"

      - name: Fix website rollup dependencies
        run: |
          echo "üîß Fixing rollup native dependencies for website..."
          cd packages/website
          
          # Remove existing problematic installations
          rm -rf node_modules package-lock.json
          
          # Install with flags to ensure optional dependencies are included
          npm install --include=optional --force
          
          # Explicitly install the missing rollup native binary
          npm install @rollup/rollup-linux-x64-gnu --save-dev --force || echo "Continuing without explicit rollup binary..."
          
          echo "‚úÖ Website dependencies fixed"

      - name: Build website with fixed dependencies
        run: |
          echo "üèóÔ∏è Building website with fixed rollup dependencies..."
          cd packages/website
          
          # Build the website for production
          npm run build:production
          
          echo "‚úÖ Website build completed"

      - name: Build public website
        run: |
          echo "üèóÔ∏è Building public website..."
          cd packages/public-website
          
          # Build the public website
          npm run build
          
          echo "‚úÖ Public website build completed"

      - name: Deploy Infrastructure to AWS
        run: |
          echo "üöÄ Deploying CDK Infrastructure to AWS..."
          echo "This includes all stacks: Domain, Auth, Guard, Cameras, Integrations, Dashboards, Admin"
          # Deploy all infrastructure stacks including integrations in proper order
          npm run deploy:infrastructure --workspace=@manor/cdk
          echo "‚úÖ Infrastructure deployment completed"
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: us-east-1
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SKIP_PREBUILD: true

      - name: Deploy Website to AWS
        run: |
          echo "üåê Deploying Website to AWS..."
          # Deploy the website stack (depends on infrastructure)
          npm run deploy:website:ci --workspace=@manor/cdk
          echo "‚úÖ Website deployment completed"
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: us-east-1
          SKIP_PREBUILD: true

      - name: Deploy public website
        run: |
          echo "üåê Deploying public website to AWS..."
          # Deploy the public website stack
          npm run deploy:public-website:ci --workspace=@manor/cdk
          echo "‚úÖ Public website deployment completed"
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: us-east-1

      - name: Verify Deployment
        run: |
          echo "üîç Verifying deployment..."
          echo "Checking if integration stack endpoints are accessible..."
          # Give AWS a moment to propagate changes
          sleep 30
          
          # Test if the API Gateway is responding (basic connectivity check)
          INTEGRATION_API_URL=$(aws cloudformation describe-stacks \
            --stack-name CasaIntegrationsCdkStack \
            --query 'Stacks[0].Outputs[?OutputKey==`IntegrationApiUrl`].OutputValue' \
            --output text 2>/dev/null || echo "")
          
          if [ -n "$INTEGRATION_API_URL" ]; then
            echo "‚úÖ Integration API URL found: $INTEGRATION_API_URL"
            # Test basic connectivity
            if curl -f -s -o /dev/null "$INTEGRATION_API_URL/health" || curl -f -s -o /dev/null "$INTEGRATION_API_URL" ; then
              echo "‚úÖ Integration API is responding"
            else
              echo "‚ö†Ô∏è  Integration API deployed but not responding (this may be normal)"
            fi
          else
            echo "‚ö†Ô∏è  Could not retrieve Integration API URL"
          fi
          
          echo "‚úÖ Deployment verification completed"
