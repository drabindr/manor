name: Deploy Manor

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'

# Jobs run in parallel for faster feedback:
# - test: Fast test execution (blocks deployment if fails)
# - coverage: Detailed coverage reporting (for visibility, doesn't block deployment)
# - deploy: Deployment (only runs if tests pass)
jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install website dependencies
        run: |
          echo "üì¶ Installing website dependencies for testing..."
          cd packages/website
          
          # Install dependencies with force to handle any conflicts
          npm install --include=optional --force
          
          echo "‚úÖ Dependencies installed for testing"

      - name: Run test suite (fast, no coverage)
        run: |
          echo "üß™ Running test suite..."
          cd packages/website
          
          # Run tests without coverage for faster feedback
          npm test
          
          echo "‚úÖ All tests passed!"

  coverage:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install website dependencies
        run: |
          echo "üì¶ Installing website dependencies for coverage..."
          cd packages/website
          
          # Install dependencies with force to handle any conflicts
          npm install --include=optional --force
          
          echo "‚úÖ Dependencies installed for coverage"

      - name: Generate test coverage report
        run: |
          echo "üìä Generating test coverage report..."
          cd packages/website
          
          # Run tests with coverage reporting
          npm run test:coverage
          
          echo "‚úÖ Coverage report generated!"

      - name: Create coverage summary
        run: |
          echo "üìã Creating coverage summary..."
          cd packages/website
          
          # Create a simple coverage summary for GitHub Actions
          if [ -f "coverage/coverage-summary.json" ]; then
            echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Coverage report generated successfully!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üìä View full coverage report in the artifacts section" >> $GITHUB_STEP_SUMMARY
          else
            echo "Coverage summary not found, but report should be available in artifacts" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-coverage-report
          path: packages/website/coverage/
          retention-days: 30

      - name: Upload coverage to GitHub Pages (if available)
        uses: actions/upload-pages-artifact@v3
        if: always()
        with:
          name: coverage-report
          path: packages/website/coverage/
          retention-days: 30

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: test
    if: github.ref_name == 'main'
    environment: production
    
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-Deploy-Manor
          aws-region: us-east-1

      - name: Install dependencies (excluding iOS)
        run: |
          echo "üì¶ Installing dependencies excluding iOS package..."
          # Install dependencies for specific workspaces (iOS is automatically excluded)
          npm install --workspace=@manor/cdk --workspace=@manor/website
          echo "‚úÖ Dependencies installed successfully"

      - name: Fix website rollup dependencies
        run: |
          echo "üîß Fixing rollup native dependencies for website..."
          cd packages/website
          
          # Remove existing problematic installations
          rm -rf node_modules package-lock.json
          
          # Install with flags to ensure optional dependencies are included
          npm install --include=optional --force
          
          # Explicitly install the missing rollup native binary
          npm install @rollup/rollup-linux-x64-gnu --save-dev --force || echo "Continuing without explicit rollup binary..."
          
          echo "‚úÖ Website dependencies fixed"

      - name: Build website with fixed dependencies
        run: |
          echo "üèóÔ∏è Building website with fixed rollup dependencies..."
          cd packages/website
          
          # Build the website for production
          npm run build:production
          
          echo "‚úÖ Website build completed"

      - name: Deploy to AWS
        run: |
          echo "üöÄ Deploying Manor to AWS..."
          # Use the fixed website dependencies for deployment
          npm run deploy --workspace=@manor/cdk
          echo "‚úÖ Deployment completed"
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: us-east-1
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SKIP_PREBUILD: true
