"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxschema = require("@aws-cdk/cloud-assembly-schema");
;
const util_1 = require("./util");
const bootstrap_1 = require("../lib/api/bootstrap");
const cdk_toolkit_1 = require("../lib/cdk-toolkit");
const list_stacks_1 = require("../lib/list-stacks");
describe('list', () => {
    let cloudFormation;
    let bootstrapper;
    beforeEach(() => {
        jest.resetAllMocks();
        bootstrapper = (0, util_1.instanceMockFrom)(bootstrap_1.Bootstrapper);
        bootstrapper.bootstrapEnvironment.mockResolvedValue({ noOp: false, outputs: {} });
    });
    test('stacks with no dependencies', async () => {
        let cloudExecutable = new util_1.MockCloudExecutable({
            stacks: [
                MockStack.MOCK_STACK_A,
                {
                    stackName: 'Test-Stack-B',
                    template: { Resources: { TemplateName: 'Test-Stack-B' } },
                    env: 'aws://123456789012/bermuda-triangle-1',
                    metadata: {
                        '/Test-Stack-B': [
                            {
                                type: cxschema.ArtifactMetadataEntryType.STACK_TAGS,
                            },
                        ],
                    },
                },
            ],
        });
        // GIVEN
        const toolkit = new cdk_toolkit_1.CdkToolkit({
            cloudExecutable,
            configuration: cloudExecutable.configuration,
            sdkProvider: cloudExecutable.sdkProvider,
            deployments: cloudFormation,
        });
        // WHEN
        const workflow = await (0, list_stacks_1.listStacks)(toolkit, { selectors: ['Test-Stack-A', 'Test-Stack-B'] });
        // THEN
        expect(JSON.stringify(workflow)).toEqual(JSON.stringify([{
                id: 'Test-Stack-A',
                name: 'Test-Stack-A',
                environment: {
                    account: '123456789012',
                    region: 'bermuda-triangle-1',
                    name: 'aws://123456789012/bermuda-triangle-1',
                },
                dependencies: [],
            },
            {
                id: 'Test-Stack-B',
                name: 'Test-Stack-B',
                environment: {
                    account: '123456789012',
                    region: 'bermuda-triangle-1',
                    name: 'aws://123456789012/bermuda-triangle-1',
                },
                dependencies: [],
            }]));
    });
    test('stacks with dependent stacks', async () => {
        let cloudExecutable = new util_1.MockCloudExecutable({
            stacks: [
                MockStack.MOCK_STACK_A,
                {
                    stackName: 'Test-Stack-B',
                    template: { Resources: { TemplateName: 'Test-Stack-B' } },
                    env: 'aws://123456789012/bermuda-triangle-1',
                    metadata: {
                        '/Test-Stack-B': [
                            {
                                type: cxschema.ArtifactMetadataEntryType.STACK_TAGS,
                            },
                        ],
                    },
                    depends: ['Test-Stack-A'],
                },
            ],
        });
        // GIVEN
        const toolkit = new cdk_toolkit_1.CdkToolkit({
            cloudExecutable,
            configuration: cloudExecutable.configuration,
            sdkProvider: cloudExecutable.sdkProvider,
            deployments: cloudFormation,
        });
        // WHEN
        const workflow = await (0, list_stacks_1.listStacks)(toolkit, { selectors: ['Test-Stack-A', 'Test-Stack-B'] });
        // THEN
        expect(JSON.stringify(workflow)).toEqual(JSON.stringify([{
                id: 'Test-Stack-A',
                name: 'Test-Stack-A',
                environment: {
                    account: '123456789012',
                    region: 'bermuda-triangle-1',
                    name: 'aws://123456789012/bermuda-triangle-1',
                },
                dependencies: [],
            },
            {
                id: 'Test-Stack-B',
                name: 'Test-Stack-B',
                environment: {
                    account: '123456789012',
                    region: 'bermuda-triangle-1',
                    name: 'aws://123456789012/bermuda-triangle-1',
                },
                dependencies: [{
                        id: 'Test-Stack-A',
                        dependencies: [],
                    }],
            }]));
    });
    // In the context where we have a display name set to hieraricalId/stackName
    // we would need to pass in the displayName to list the stacks.
    test('stacks with dependent stacks and have display name set to hieraricalId/stackName', async () => {
        let cloudExecutable = new util_1.MockCloudExecutable({
            stacks: [
                MockStack.MOCK_STACK_A,
                {
                    stackName: 'Test-Stack-B',
                    template: { Resources: { TemplateName: 'Test-Stack-B' } },
                    env: 'aws://123456789012/bermuda-triangle-1',
                    metadata: {
                        '/Test-Stack-B': [
                            {
                                type: cxschema.ArtifactMetadataEntryType.STACK_TAGS,
                            },
                        ],
                    },
                    depends: ['Test-Stack-A'],
                    displayName: 'Test-Stack-A/Test-Stack-B',
                },
            ],
        });
        // GIVEN
        const toolkit = new cdk_toolkit_1.CdkToolkit({
            cloudExecutable,
            configuration: cloudExecutable.configuration,
            sdkProvider: cloudExecutable.sdkProvider,
            deployments: cloudFormation,
        });
        // WHEN
        const workflow = await (0, list_stacks_1.listStacks)(toolkit, { selectors: ['Test-Stack-A', 'Test-Stack-A/Test-Stack-B'] });
        // THEN
        expect(JSON.stringify(workflow)).toEqual(JSON.stringify([{
                id: 'Test-Stack-A',
                name: 'Test-Stack-A',
                environment: {
                    account: '123456789012',
                    region: 'bermuda-triangle-1',
                    name: 'aws://123456789012/bermuda-triangle-1',
                },
                dependencies: [],
            },
            {
                id: 'Test-Stack-B',
                name: 'Test-Stack-B',
                environment: {
                    account: '123456789012',
                    region: 'bermuda-triangle-1',
                    name: 'aws://123456789012/bermuda-triangle-1',
                },
                dependencies: [{
                        id: 'Test-Stack-A',
                        dependencies: [],
                    }],
            }]));
    });
    test('stacks with nested dependencies', async () => {
        let cloudExecutable = new util_1.MockCloudExecutable({
            stacks: [
                MockStack.MOCK_STACK_A,
                {
                    stackName: 'Test-Stack-B',
                    template: { Resources: { TemplateName: 'Test-Stack-B' } },
                    env: 'aws://123456789012/bermuda-triangle-1',
                    metadata: {
                        '/Test-Stack-B': [
                            {
                                type: cxschema.ArtifactMetadataEntryType.STACK_TAGS,
                            },
                        ],
                    },
                    depends: ['Test-Stack-A'],
                },
                {
                    stackName: 'Test-Stack-C',
                    template: { Resources: { TemplateName: 'Test-Stack-B' } },
                    env: 'aws://123456789012/bermuda-triangle-1',
                    metadata: {
                        '/Test-Stack-B': [
                            {
                                type: cxschema.ArtifactMetadataEntryType.STACK_TAGS,
                            },
                        ],
                    },
                    depends: ['Test-Stack-B'],
                },
            ],
        });
        // GIVEN
        const toolkit = new cdk_toolkit_1.CdkToolkit({
            cloudExecutable,
            configuration: cloudExecutable.configuration,
            sdkProvider: cloudExecutable.sdkProvider,
            deployments: cloudFormation,
        });
        // WHEN
        const workflow = await (0, list_stacks_1.listStacks)(toolkit, { selectors: ['Test-Stack-A', 'Test-Stack-B', 'Test-Stack-C'] });
        // THEN
        expect(JSON.stringify(workflow)).toEqual(JSON.stringify([{
                id: 'Test-Stack-A',
                name: 'Test-Stack-A',
                environment: {
                    account: '123456789012',
                    region: 'bermuda-triangle-1',
                    name: 'aws://123456789012/bermuda-triangle-1',
                },
                dependencies: [],
            },
            {
                id: 'Test-Stack-B',
                name: 'Test-Stack-B',
                environment: {
                    account: '123456789012',
                    region: 'bermuda-triangle-1',
                    name: 'aws://123456789012/bermuda-triangle-1',
                },
                dependencies: [{
                        id: 'Test-Stack-A',
                        dependencies: [],
                    }],
            },
            {
                id: 'Test-Stack-C',
                name: 'Test-Stack-C',
                environment: {
                    account: '123456789012',
                    region: 'bermuda-triangle-1',
                    name: 'aws://123456789012/bermuda-triangle-1',
                },
                dependencies: [{
                        id: 'Test-Stack-B',
                        dependencies: [{
                                id: 'Test-Stack-A',
                                dependencies: [],
                            }],
                    }],
            }]));
    });
    // In the context of stacks with cross-stack or cross-region references,
    // the dependency mechanism is responsible for appropriately applying dependencies at the correct hierarchy level,
    // typically at the top-level stacks.
    // This involves handling the establishment of cross-references between stacks or nested stacks
    // and generating assets for nested stack templates as necessary.
    test('stacks with cross stack referencing', async () => {
        let cloudExecutable = new util_1.MockCloudExecutable({
            stacks: [
                {
                    stackName: 'Test-Stack-A',
                    template: {
                        Resources: {
                            MyBucket1Reference: {
                                Type: 'AWS::CloudFormation::Stack',
                                Properties: {
                                    TemplateURL: 'XXXXXXXXXXXXXXXXXXXXXXXXX',
                                    Parameters: {
                                        BucketName: { 'Fn::GetAtt': ['MyBucket1', 'Arn'] },
                                    },
                                },
                            },
                        },
                    },
                    env: 'aws://123456789012/bermuda-triangle-1',
                    metadata: {
                        '/Test-Stack-A': [
                            {
                                type: cxschema.ArtifactMetadataEntryType.STACK_TAGS,
                            },
                        ],
                    },
                    depends: ['Test-Stack-C'],
                },
                MockStack.MOCK_STACK_C,
            ],
        });
        // GIVEN
        const toolkit = new cdk_toolkit_1.CdkToolkit({
            cloudExecutable,
            configuration: cloudExecutable.configuration,
            sdkProvider: cloudExecutable.sdkProvider,
            deployments: cloudFormation,
        });
        // WHEN
        const workflow = await (0, list_stacks_1.listStacks)(toolkit, { selectors: ['Test-Stack-A', 'Test-Stack-C'] });
        // THEN
        expect(JSON.stringify(workflow)).toEqual(JSON.stringify([{
                id: 'Test-Stack-C',
                name: 'Test-Stack-C',
                environment: {
                    account: '123456789012',
                    region: 'bermuda-triangle-1',
                    name: 'aws://123456789012/bermuda-triangle-1',
                },
                dependencies: [],
            },
            {
                id: 'Test-Stack-A',
                name: 'Test-Stack-A',
                environment: {
                    account: '123456789012',
                    region: 'bermuda-triangle-1',
                    name: 'aws://123456789012/bermuda-triangle-1',
                },
                dependencies: [{
                        id: 'Test-Stack-C',
                        dependencies: [],
                    }],
            }]));
    });
    test('stacks with circular dependencies should error out', async () => {
        let cloudExecutable = new util_1.MockCloudExecutable({
            stacks: [
                {
                    stackName: 'Test-Stack-A',
                    template: { Resources: { TemplateName: 'Test-Stack-A' } },
                    env: 'aws://123456789012/bermuda-triangle-1',
                    metadata: {
                        '/Test-Stack-A': [
                            {
                                type: cxschema.ArtifactMetadataEntryType.STACK_TAGS,
                            },
                        ],
                    },
                    depends: ['Test-Stack-B'],
                },
                {
                    stackName: 'Test-Stack-B',
                    template: { Resources: { TemplateName: 'Test-Stack-B' } },
                    env: 'aws://123456789012/bermuda-triangle-1',
                    metadata: {
                        '/Test-Stack-B': [
                            {
                                type: cxschema.ArtifactMetadataEntryType.STACK_TAGS,
                            },
                        ],
                    },
                    depends: ['Test-Stack-A'],
                },
            ],
        });
        // GIVEN
        const toolkit = new cdk_toolkit_1.CdkToolkit({
            cloudExecutable,
            configuration: cloudExecutable.configuration,
            sdkProvider: cloudExecutable.sdkProvider,
            deployments: cloudFormation,
        });
        // WHEN
        await expect(() => (0, list_stacks_1.listStacks)(toolkit, { selectors: ['Test-Stack-A', 'Test-Stack-B'] })).rejects.toThrow('Could not determine ordering');
    });
});
class MockStack {
}
MockStack.MOCK_STACK_A = {
    stackName: 'Test-Stack-A',
    template: { Resources: { TemplateName: 'Test-Stack-A' } },
    env: 'aws://123456789012/bermuda-triangle-1',
    metadata: {
        '/Test-Stack-A': [
            {
                type: cxschema.ArtifactMetadataEntryType.STACK_TAGS,
            },
        ],
    },
};
MockStack.MOCK_STACK_C = {
    stackName: 'Test-Stack-C',
    template: {
        Resources: {
            MyBucket1: {
                Type: 'AWS::S3::Bucket',
                Properties: {
                    AccessControl: 'PublicRead',
                },
                DeletionPolicy: 'Retain',
            },
        },
    },
    env: 'aws://123456789012/bermuda-triangle-1',
    metadata: {
        '/Test-Stack-C': [
            {
                type: cxschema.ArtifactMetadataEntryType.STACK_TAGS,
            },
        ],
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1zdGFja3MudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxpc3Qtc3RhY2tzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyREFBMkQ7QUFBQSxDQUFDO0FBQzVELGlDQUFrRjtBQUNsRixvREFBb0Q7QUFFcEQsb0RBQWdEO0FBQ2hELG9EQUFnRDtBQUVoRCxRQUFRLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtJQUNwQixJQUFJLGNBQXdDLENBQUM7SUFDN0MsSUFBSSxZQUF1QyxDQUFDO0lBRTVDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFFckIsWUFBWSxHQUFHLElBQUEsdUJBQWdCLEVBQUMsd0JBQVksQ0FBQyxDQUFDO1FBQzlDLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBUyxDQUFDLENBQUM7SUFDM0YsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsNkJBQTZCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDN0MsSUFBSSxlQUFlLEdBQUcsSUFBSSwwQkFBbUIsQ0FBQztZQUM1QyxNQUFNLEVBQUU7Z0JBQ04sU0FBUyxDQUFDLFlBQVk7Z0JBQ3RCO29CQUNFLFNBQVMsRUFBRSxjQUFjO29CQUN6QixRQUFRLEVBQUUsRUFBRSxTQUFTLEVBQUUsRUFBRSxZQUFZLEVBQUUsY0FBYyxFQUFFLEVBQUU7b0JBQ3pELEdBQUcsRUFBRSx1Q0FBdUM7b0JBQzVDLFFBQVEsRUFBRTt3QkFDUixlQUFlLEVBQUU7NEJBQ2Y7Z0NBQ0UsSUFBSSxFQUFFLFFBQVEsQ0FBQyx5QkFBeUIsQ0FBQyxVQUFVOzZCQUNwRDt5QkFDRjtxQkFDRjtpQkFDRjthQUNGO1NBQ0YsQ0FBQyxDQUFDO1FBQ0gsUUFBUTtRQUNSLE1BQU0sT0FBTyxHQUFHLElBQUksd0JBQVUsQ0FBQztZQUM3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QyxDQUFDO0lBQ3BELENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxNQUFNLFNBQVM7O0FBQ1Usc0JBQVksR0FBc0I7SUFDdkQsU0FBUyxFQUFFLGNBQWM7SUFDekIsUUFBUSxFQUFFLEVBQUUsU0FBUyxFQUFFLEVBQUUsWUFBWSxFQUFFLGNBQWMsRUFBRSxFQUFFO0lBQ3pELEdBQUcsRUFBRSx1Q0FBdUM7SUFDNUMsUUFBUSxFQUFFO1FBQ1IsZUFBZSxFQUFFO1lBQ2Y7Z0JBQ0UsSUFBSSxFQUFFLFFBQVEsQ0FBQyx5QkFBeUIsQ0FBQyxVQUFVO2FBQ3BEO1NBQ0Y7S0FDRjtDQUNGLENBQUM7QUFDcUIsc0JBQVksR0FBc0I7SUFDdkQsU0FBUyxFQUFFLGNBQWM7SUFDekIsUUFBUSxFQUFFO1FBQ1IsU0FBUyxFQUFFO1lBQ1QsU0FBUyxFQUFFO2dCQUNULElBQUksRUFBRSxpQkFBaUI7Z0JBQ3ZCLFVBQVUsRUFBRTtvQkFDVixhQUFhLEVBQUUsWUFBWTtpQkFDNUI7Z0JBQ0QsY0FBYyxFQUFFLFFBQVE7YUFDekI7U0FDRjtLQUNGO0lBQ0QsR0FBRyxFQUFFLHVDQUF1QztJQUM1QyxRQUFRLEVBQUU7UUFDUixlQUFlLEVBQUU7WUFDZjtnQkFDRSxJQUFJLEVBQUUsUUFBUSxDQUFDLHlCQUF5QixDQUFDLFVBQVU7YUFDcEQ7U0FDRjtLQUNGO0NBQ0YsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGN4c2NoZW1hIGZyb20gJ0Bhd3MtY2RrL2Nsb3VkLWFzc2VtYmx5LXNjaGVtYSc7O1xuaW1wb3J0IHsgaW5zdGFuY2VNb2NrRnJvbSwgTW9ja0Nsb3VkRXhlY3V0YWJsZSwgVGVzdFN0YWNrQXJ0aWZhY3QgfSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IHsgQm9vdHN0cmFwcGVyIH0gZnJvbSAnLi4vbGliL2FwaS9ib290c3RyYXAnO1xuaW1wb3J0IHsgRGVwbG95bWVudHMgfSBmcm9tICcuLi9saWIvYXBpL2RlcGxveW1lbnRzJztcbmltcG9ydCB7IENka1Rvb2xraXQgfSBmcm9tICcuLi9saWIvY2RrLXRvb2xraXQnO1xuaW1wb3J0IHsgbGlzdFN0YWNrcyB9IGZyb20gJy4uL2xpYi9saXN0LXN0YWNrcyc7XG5cbmRlc2NyaWJlKCdsaXN0JywgKCkgPT4ge1xuICBsZXQgY2xvdWRGb3JtYXRpb246IGplc3QuTW9ja2VkPERlcGxveW1lbnRzPjtcbiAgbGV0IGJvb3RzdHJhcHBlcjogamVzdC5Nb2NrZWQ8Qm9vdHN0cmFwcGVyPjtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LnJlc2V0QWxsTW9ja3MoKTtcblxuICAgIGJvb3RzdHJhcHBlciA9IGluc3RhbmNlTW9ja0Zyb20oQm9vdHN0cmFwcGVyKTtcbiAgICBib290c3RyYXBwZXIuYm9vdHN0cmFwRW52aXJvbm1lbnQubW9ja1Jlc29sdmVkVmFsdWUoeyBub09wOiBmYWxzZSwgb3V0cHV0czoge30gfSBhcyBhbnkpO1xuICB9KTtcblxuICB0ZXN0KCdzdGFja3Mgd2l0aCBubyBkZXBlbmRlbmNpZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IGNsb3VkRXhlY3V0YWJsZSA9IG5ldyBNb2NrQ2xvdWRFeGVjdXRhYmxlKHtcbiAgICAgIHN0YWNrczogW1xuICAgICAgICBNb2NrU3RhY2suTU9DS19TVEFDS19BLFxuICAgICAgICB7XG4gICAgICAgICAgc3RhY2tOYW1lOiAnVGVzdC1TdGFjay1CJyxcbiAgICAgICAgICB0ZW1wbGF0ZTogeyBSZXNvdXJjZXM6IHsgVGVtcGxhdGVOYW1lOiAnVGVzdC1TdGFjay1CJyB9IH0sXG4gICAgICAgICAgZW52OiAnYXdzOi8vMTIzNDU2Nzg5MDEyL2Jlcm11ZGEtdHJpYW5nbGUtMScsXG4gICAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAgICcvVGVzdC1TdGFjay1CJzogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdHlwZTogY3hzY2hlbWEuQXJ0aWZhY3RNZXRhZGF0YUVudHJ5VHlwZS5TVEFDS19UQUdTLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHRvb2xraXQgPSBuZXcgQ2RrVG9vbGtpdCh7XG4gICAgICBjbG91ZEV4ZWN1dGFibGUsXG4gICAgICBjb25maWd1cmF0aW9uOiBjbG91ZEV4ZWN1dGFibGUuY29uZmlndXJhdGlvbixcbiAgICAgIHNka1Byb3ZpZGVyOiBjbG91ZEV4ZWN1dGFibGUuc2RrUHJvdmlkZXIsXG4gICAgICBkZXBsb3ltZW50czogY2xvdWRGb3JtYXRpb24sXG4gICAgfSk7XG5cbiAgICAvLyBXSEVOXG4gICAgY29uc3Qgd29ya2Zsb3cgPSBhd2FpdCBsaXN0U3RhY2tzKHRvb2xraXQsIHsgc2VsZWN0b3JzOiBbJ1Rlc3QtU3RhY2stQScsICdUZXN0LVN0YWNrLUInXSB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QoSlNPTi5zdHJpbmdpZnkod29ya2Zsb3cpKS50b0VxdWFsKEpTT04uc3RyaW5naWZ5KFt7XG4gICAgICBpZDogJ1Rlc3QtU3RhY2stQScsXG4gICAgICBuYW1lOiAnVGVzdC1TdGFjay1BJyxcbiAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgIGFjY291bnQ6ICcxMjM0NTY3ODkwMTInLFxuICAgICAgICByZWdpb246ICdiZXJtdWRhLXRyaWFuZ2xlLTEnLFxuICAgICAgICBuYW1lOiAnYXdzOi8vMTIzNDU2Nzg5MDEyL2Jlcm11ZGEtdHJpYW5nbGUtMScsXG4gICAgICB9LFxuICAgICAgZGVwZW5kZW5jaWVzOiBbXSxcbiAgICB9LFxuICAgIHtcbiAgICAgIGlkOiAnVGVzdC1TdGFjay1CJyxcbiAgICAgIG5hbWU6ICdUZXN0LVN0YWNrLUInLFxuICAgICAgZW52aXJvbm1lbnQ6IHtcbiAgICAgICAgYWNjb3VudDogJzEyMzQ1Njc4OTAxMicsXG4gICAgICAgIHJlZ2lvbjogJ2Jlcm11ZGEtdHJpYW5nbGUtMScsXG4gICAgICAgIG5hbWU6ICdhd3M6Ly8xMjM0NTY3ODkwMTIvYmVybXVkYS10cmlhbmdsZS0xJyxcbiAgICAgIH0sXG4gICAgICBkZXBlbmRlbmNpZXM6IFtdLFxuICAgIH1dKSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3N0YWNrcyB3aXRoIGRlcGVuZGVudCBzdGFja3MnLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IGNsb3VkRXhlY3V0YWJsZSA9IG5ldyBNb2NrQ2xvdWRFeGVjdXRhYmxlKHtcbiAgICAgIHN0YWNrczogW1xuICAgICAgICBNb2NrU3RhY2suTU9DS19TVEFDS19BLFxuICAgICAgICB7XG4gICAgICAgICAgc3RhY2tOYW1lOiAnVGVzdC1TdGFjay1CJyxcbiAgICAgICAgICB0ZW1wbGF0ZTogeyBSZXNvdXJjZXM6IHsgVGVtcGxhdGVOYW1lOiAnVGVzdC1TdGFjay1CJyB9IH0sXG4gICAgICAgICAgZW52OiAnYXdzOi8vMTIzNDU2Nzg5MDEyL2Jlcm11ZGEtdHJpYW5nbGUtMScsXG4gICAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAgICcvVGVzdC1TdGFjay1CJzogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdHlwZTogY3hzY2hlbWEuQXJ0aWZhY3RNZXRhZGF0YUVudHJ5VHlwZS5TVEFDS19UQUdTLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRlcGVuZHM6IFsnVGVzdC1TdGFjay1BJ10sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCB0b29sa2l0ID0gbmV3IENka1Rvb2xraXQoe1xuICAgICAgY2xvdWRFeGVjdXRhYmxlLFxuICAgICAgY29uZmlndXJhdGlvbjogY2xvdWRFeGVjdXRhYmxlLmNvbmZpZ3VyYXRpb24sXG4gICAgICBzZGtQcm92aWRlcjogY2xvdWRFeGVjdXRhYmxlLnNka1Byb3ZpZGVyLFxuICAgICAgZGVwbG95bWVudHM6IGNsb3VkRm9ybWF0aW9uLFxuICAgIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IHdvcmtmbG93ID0gYXdhaXQgbGlzdFN0YWNrcyggdG9vbGtpdCwgeyBzZWxlY3RvcnM6IFsnVGVzdC1TdGFjay1BJywgJ1Rlc3QtU3RhY2stQiddIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChKU09OLnN0cmluZ2lmeSh3b3JrZmxvdykpLnRvRXF1YWwoSlNPTi5zdHJpbmdpZnkoW3tcbiAgICAgIGlkOiAnVGVzdC1TdGFjay1BJyxcbiAgICAgIG5hbWU6ICdUZXN0LVN0YWNrLUEnLFxuICAgICAgZW52aXJvbm1lbnQ6IHtcbiAgICAgICAgYWNjb3VudDogJzEyMzQ1Njc4OTAxMicsXG4gICAgICAgIHJlZ2lvbjogJ2Jlcm11ZGEtdHJpYW5nbGUtMScsXG4gICAgICAgIG5hbWU6ICdhd3M6Ly8xMjM0NTY3ODkwMTIvYmVybXVkYS10cmlhbmdsZS0xJyxcbiAgICAgIH0sXG4gICAgICBkZXBlbmRlbmNpZXM6IFtdLFxuICAgIH0sXG4gICAge1xuICAgICAgaWQ6ICdUZXN0LVN0YWNrLUInLFxuICAgICAgbmFtZTogJ1Rlc3QtU3RhY2stQicsXG4gICAgICBlbnZpcm9ubWVudDoge1xuICAgICAgICBhY2NvdW50OiAnMTIzNDU2Nzg5MDEyJyxcbiAgICAgICAgcmVnaW9uOiAnYmVybXVkYS10cmlhbmdsZS0xJyxcbiAgICAgICAgbmFtZTogJ2F3czovLzEyMzQ1Njc4OTAxMi9iZXJtdWRhLXRyaWFuZ2xlLTEnLFxuICAgICAgfSxcbiAgICAgIGRlcGVuZGVuY2llczogW3tcbiAgICAgICAgaWQ6ICdUZXN0LVN0YWNrLUEnLFxuICAgICAgICBkZXBlbmRlbmNpZXM6IFtdLFxuICAgICAgfV0sXG4gICAgfV0pKTtcbiAgfSk7XG5cbiAgLy8gSW4gdGhlIGNvbnRleHQgd2hlcmUgd2UgaGF2ZSBhIGRpc3BsYXkgbmFtZSBzZXQgdG8gaGllcmFyaWNhbElkL3N0YWNrTmFtZVxuICAvLyB3ZSB3b3VsZCBuZWVkIHRvIHBhc3MgaW4gdGhlIGRpc3BsYXlOYW1lIHRvIGxpc3QgdGhlIHN0YWNrcy5cbiAgdGVzdCgnc3RhY2tzIHdpdGggZGVwZW5kZW50IHN0YWNrcyBhbmQgaGF2ZSBkaXNwbGF5IG5hbWUgc2V0IHRvIGhpZXJhcmljYWxJZC9zdGFja05hbWUnLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IGNsb3VkRXhlY3V0YWJsZSA9IG5ldyBNb2NrQ2xvdWRFeGVjdXRhYmxlKHtcbiAgICAgIHN0YWNrczogW1xuICAgICAgICBNb2NrU3RhY2suTU9DS19TVEFDS19BLFxuICAgICAgICB7XG4gICAgICAgICAgc3RhY2tOYW1lOiAnVGVzdC1TdGFjay1CJyxcbiAgICAgICAgICB0ZW1wbGF0ZTogeyBSZXNvdXJjZXM6IHsgVGVtcGxhdGVOYW1lOiAnVGVzdC1TdGFjay1CJyB9IH0sXG4gICAgICAgICAgZW52OiAnYXdzOi8vMTIzNDU2Nzg5MDEyL2Jlcm11ZGEtdHJpYW5nbGUtMScsXG4gICAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAgICcvVGVzdC1TdGFjay1CJzogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdHlwZTogY3hzY2hlbWEuQXJ0aWZhY3RNZXRhZGF0YUVudHJ5VHlwZS5TVEFDS19UQUdTLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRlcGVuZHM6IFsnVGVzdC1TdGFjay1BJ10sXG4gICAgICAgICAgZGlzcGxheU5hbWU6ICdUZXN0LVN0YWNrLUEvVGVzdC1TdGFjay1CJyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHRvb2xraXQgPSBuZXcgQ2RrVG9vbGtpdCh7XG4gICAgICBjbG91ZEV4ZWN1dGFibGUsXG4gICAgICBjb25maWd1cmF0aW9uOiBjbG91ZEV4ZWN1dGFibGUuY29uZmlndXJhdGlvbixcbiAgICAgIHNka1Byb3ZpZGVyOiBjbG91ZEV4ZWN1dGFibGUuc2RrUHJvdmlkZXIsXG4gICAgICBkZXBsb3ltZW50czogY2xvdWRGb3JtYXRpb24sXG4gICAgfSk7XG5cbiAgICAvLyBXSEVOXG4gICAgY29uc3Qgd29ya2Zsb3cgPSBhd2FpdCBsaXN0U3RhY2tzKCB0b29sa2l0LCB7IHNlbGVjdG9yczogWydUZXN0LVN0YWNrLUEnLCAnVGVzdC1TdGFjay1BL1Rlc3QtU3RhY2stQiddIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChKU09OLnN0cmluZ2lmeSh3b3JrZmxvdykpLnRvRXF1YWwoSlNPTi5zdHJpbmdpZnkoW3tcbiAgICAgIGlkOiAnVGVzdC1TdGFjay1BJyxcbiAgICAgIG5hbWU6ICdUZXN0LVN0YWNrLUEnLFxuICAgICAgZW52aXJvbm1lbnQ6IHtcbiAgICAgICAgYWNjb3VudDogJzEyMzQ1Njc4OTAxMicsXG4gICAgICAgIHJlZ2lvbjogJ2Jlcm11ZGEtdHJpYW5nbGUtMScsXG4gICAgICAgIG5hbWU6ICdhd3M6Ly8xMjM0NTY3ODkwMTIvYmVybXVkYS10cmlhbmdsZS0xJyxcbiAgICAgIH0sXG4gICAgICBkZXBlbmRlbmNpZXM6IFtdLFxuICAgIH0sXG4gICAge1xuICAgICAgaWQ6ICdUZXN0LVN0YWNrLUInLFxuICAgICAgbmFtZTogJ1Rlc3QtU3RhY2stQicsXG4gICAgICBlbnZpcm9ubWVudDoge1xuICAgICAgICBhY2NvdW50OiAnMTIzNDU2Nzg5MDEyJyxcbiAgICAgICAgcmVnaW9uOiAnYmVybXVkYS10cmlhbmdsZS0xJyxcbiAgICAgICAgbmFtZTogJ2F3czovLzEyMzQ1Njc4OTAxMi9iZXJtdWRhLXRyaWFuZ2xlLTEnLFxuICAgICAgfSxcbiAgICAgIGRlcGVuZGVuY2llczogW3tcbiAgICAgICAgaWQ6ICdUZXN0LVN0YWNrLUEnLFxuICAgICAgICBkZXBlbmRlbmNpZXM6IFtdLFxuICAgICAgfV0sXG4gICAgfV0pKTtcbiAgfSk7XG5cbiAgdGVzdCgnc3RhY2tzIHdpdGggbmVzdGVkIGRlcGVuZGVuY2llcycsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgY2xvdWRFeGVjdXRhYmxlID0gbmV3IE1vY2tDbG91ZEV4ZWN1dGFibGUoe1xuICAgICAgc3RhY2tzOiBbXG4gICAgICAgIE1vY2tTdGFjay5NT0NLX1NUQUNLX0EsXG4gICAgICAgIHtcbiAgICAgICAgICBzdGFja05hbWU6ICdUZXN0LVN0YWNrLUInLFxuICAgICAgICAgIHRlbXBsYXRlOiB7IFJlc291cmNlczogeyBUZW1wbGF0ZU5hbWU6ICdUZXN0LVN0YWNrLUInIH0gfSxcbiAgICAgICAgICBlbnY6ICdhd3M6Ly8xMjM0NTY3ODkwMTIvYmVybXVkYS10cmlhbmdsZS0xJyxcbiAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgJy9UZXN0LVN0YWNrLUInOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBjeHNjaGVtYS5BcnRpZmFjdE1ldGFkYXRhRW50cnlUeXBlLlNUQUNLX1RBR1MsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZGVwZW5kczogWydUZXN0LVN0YWNrLUEnXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHN0YWNrTmFtZTogJ1Rlc3QtU3RhY2stQycsXG4gICAgICAgICAgdGVtcGxhdGU6IHsgUmVzb3VyY2VzOiB7IFRlbXBsYXRlTmFtZTogJ1Rlc3QtU3RhY2stQicgfSB9LFxuICAgICAgICAgIGVudjogJ2F3czovLzEyMzQ1Njc4OTAxMi9iZXJtdWRhLXRyaWFuZ2xlLTEnLFxuICAgICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgICAnL1Rlc3QtU3RhY2stQic6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5cGU6IGN4c2NoZW1hLkFydGlmYWN0TWV0YWRhdGFFbnRyeVR5cGUuU1RBQ0tfVEFHUyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBkZXBlbmRzOiBbJ1Rlc3QtU3RhY2stQiddLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIC8vIEdJVkVOXG4gICAgY29uc3QgdG9vbGtpdCA9IG5ldyBDZGtUb29sa2l0KHtcbiAgICAgIGNsb3VkRXhlY3V0YWJsZSxcbiAgICAgIGNvbmZpZ3VyYXRpb246IGNsb3VkRXhlY3V0YWJsZS5jb25maWd1cmF0aW9uLFxuICAgICAgc2RrUHJvdmlkZXI6IGNsb3VkRXhlY3V0YWJsZS5zZGtQcm92aWRlcixcbiAgICAgIGRlcGxveW1lbnRzOiBjbG91ZEZvcm1hdGlvbixcbiAgICB9KTtcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCB3b3JrZmxvdyA9IGF3YWl0IGxpc3RTdGFja3MoIHRvb2xraXQsIHsgc2VsZWN0b3JzOiBbJ1Rlc3QtU3RhY2stQScsICdUZXN0LVN0YWNrLUInLCAnVGVzdC1TdGFjay1DJ10gfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KEpTT04uc3RyaW5naWZ5KHdvcmtmbG93KSkudG9FcXVhbChKU09OLnN0cmluZ2lmeShbe1xuICAgICAgaWQ6ICdUZXN0LVN0YWNrLUEnLFxuICAgICAgbmFtZTogJ1Rlc3QtU3RhY2stQScsXG4gICAgICBlbnZpcm9ubWVudDoge1xuICAgICAgICBhY2NvdW50OiAnMTIzNDU2Nzg5MDEyJyxcbiAgICAgICAgcmVnaW9uOiAnYmVybXVkYS10cmlhbmdsZS0xJyxcbiAgICAgICAgbmFtZTogJ2F3czovLzEyMzQ1Njc4OTAxMi9iZXJtdWRhLXRyaWFuZ2xlLTEnLFxuICAgICAgfSxcbiAgICAgIGRlcGVuZGVuY2llczogW10sXG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogJ1Rlc3QtU3RhY2stQicsXG4gICAgICBuYW1lOiAnVGVzdC1TdGFjay1CJyxcbiAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgIGFjY291bnQ6ICcxMjM0NTY3ODkwMTInLFxuICAgICAgICByZWdpb246ICdiZXJtdWRhLXRyaWFuZ2xlLTEnLFxuICAgICAgICBuYW1lOiAnYXdzOi8vMTIzNDU2Nzg5MDEyL2Jlcm11ZGEtdHJpYW5nbGUtMScsXG4gICAgICB9LFxuICAgICAgZGVwZW5kZW5jaWVzOiBbe1xuICAgICAgICBpZDogJ1Rlc3QtU3RhY2stQScsXG4gICAgICAgIGRlcGVuZGVuY2llczogW10sXG4gICAgICB9XSxcbiAgICB9LFxuICAgIHtcbiAgICAgIGlkOiAnVGVzdC1TdGFjay1DJyxcbiAgICAgIG5hbWU6ICdUZXN0LVN0YWNrLUMnLFxuICAgICAgZW52aXJvbm1lbnQ6IHtcbiAgICAgICAgYWNjb3VudDogJzEyMzQ1Njc4OTAxMicsXG4gICAgICAgIHJlZ2lvbjogJ2Jlcm11ZGEtdHJpYW5nbGUtMScsXG4gICAgICAgIG5hbWU6ICdhd3M6Ly8xMjM0NTY3ODkwMTIvYmVybXVkYS10cmlhbmdsZS0xJyxcbiAgICAgIH0sXG4gICAgICBkZXBlbmRlbmNpZXM6IFt7XG4gICAgICAgIGlkOiAnVGVzdC1TdGFjay1CJyxcbiAgICAgICAgZGVwZW5kZW5jaWVzOiBbe1xuICAgICAgICAgIGlkOiAnVGVzdC1TdGFjay1BJyxcbiAgICAgICAgICBkZXBlbmRlbmNpZXM6IFtdLFxuICAgICAgICB9XSxcbiAgICAgIH1dLFxuICAgIH1dKSk7XG4gIH0pO1xuXG4gIC8vIEluIHRoZSBjb250ZXh0IG9mIHN0YWNrcyB3aXRoIGNyb3NzLXN0YWNrIG9yIGNyb3NzLXJlZ2lvbiByZWZlcmVuY2VzLFxuICAvLyB0aGUgZGVwZW5kZW5jeSBtZWNoYW5pc20gaXMgcmVzcG9uc2libGUgZm9yIGFwcHJvcHJpYXRlbHkgYXBwbHlpbmcgZGVwZW5kZW5jaWVzIGF0IHRoZSBjb3JyZWN0IGhpZXJhcmNoeSBsZXZlbCxcbiAgLy8gdHlwaWNhbGx5IGF0IHRoZSB0b3AtbGV2ZWwgc3RhY2tzLlxuICAvLyBUaGlzIGludm9sdmVzIGhhbmRsaW5nIHRoZSBlc3RhYmxpc2htZW50IG9mIGNyb3NzLXJlZmVyZW5jZXMgYmV0d2VlbiBzdGFja3Mgb3IgbmVzdGVkIHN0YWNrc1xuICAvLyBhbmQgZ2VuZXJhdGluZyBhc3NldHMgZm9yIG5lc3RlZCBzdGFjayB0ZW1wbGF0ZXMgYXMgbmVjZXNzYXJ5LlxuICB0ZXN0KCdzdGFja3Mgd2l0aCBjcm9zcyBzdGFjayByZWZlcmVuY2luZycsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgY2xvdWRFeGVjdXRhYmxlID0gbmV3IE1vY2tDbG91ZEV4ZWN1dGFibGUoe1xuICAgICAgc3RhY2tzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBzdGFja05hbWU6ICdUZXN0LVN0YWNrLUEnLFxuICAgICAgICAgIHRlbXBsYXRlOiB7XG4gICAgICAgICAgICBSZXNvdXJjZXM6IHtcbiAgICAgICAgICAgICAgTXlCdWNrZXQxUmVmZXJlbmNlOiB7XG4gICAgICAgICAgICAgICAgVHlwZTogJ0FXUzo6Q2xvdWRGb3JtYXRpb246OlN0YWNrJyxcbiAgICAgICAgICAgICAgICBQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgICBUZW1wbGF0ZVVSTDogJ1hYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFgnLFxuICAgICAgICAgICAgICAgICAgUGFyYW1ldGVyczoge1xuICAgICAgICAgICAgICAgICAgICBCdWNrZXROYW1lOiB7ICdGbjo6R2V0QXR0JzogWydNeUJ1Y2tldDEnLCAnQXJuJ10gfSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBlbnY6ICdhd3M6Ly8xMjM0NTY3ODkwMTIvYmVybXVkYS10cmlhbmdsZS0xJyxcbiAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgJy9UZXN0LVN0YWNrLUEnOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBjeHNjaGVtYS5BcnRpZmFjdE1ldGFkYXRhRW50cnlUeXBlLlNUQUNLX1RBR1MsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZGVwZW5kczogWydUZXN0LVN0YWNrLUMnXSxcbiAgICAgICAgfSxcbiAgICAgICAgTW9ja1N0YWNrLk1PQ0tfU1RBQ0tfQyxcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHRvb2xraXQgPSBuZXcgQ2RrVG9vbGtpdCh7XG4gICAgICBjbG91ZEV4ZWN1dGFibGUsXG4gICAgICBjb25maWd1cmF0aW9uOiBjbG91ZEV4ZWN1dGFibGUuY29uZmlndXJhdGlvbixcbiAgICAgIHNka1Byb3ZpZGVyOiBjbG91ZEV4ZWN1dGFibGUuc2RrUHJvdmlkZXIsXG4gICAgICBkZXBsb3ltZW50czogY2xvdWRGb3JtYXRpb24sXG4gICAgfSk7XG5cbiAgICAvLyBXSEVOXG4gICAgY29uc3Qgd29ya2Zsb3cgPSBhd2FpdCBsaXN0U3RhY2tzKCB0b29sa2l0LCB7IHNlbGVjdG9yczogWydUZXN0LVN0YWNrLUEnLCAnVGVzdC1TdGFjay1DJ10gfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KEpTT04uc3RyaW5naWZ5KHdvcmtmbG93KSkudG9FcXVhbChKU09OLnN0cmluZ2lmeShbe1xuICAgICAgaWQ6ICdUZXN0LVN0YWNrLUMnLFxuICAgICAgbmFtZTogJ1Rlc3QtU3RhY2stQycsXG4gICAgICBlbnZpcm9ubWVudDoge1xuICAgICAgICBhY2NvdW50OiAnMTIzNDU2Nzg5MDEyJyxcbiAgICAgICAgcmVnaW9uOiAnYmVybXVkYS10cmlhbmdsZS0xJyxcbiAgICAgICAgbmFtZTogJ2F3czovLzEyMzQ1Njc4OTAxMi9iZXJtdWRhLXRyaWFuZ2xlLTEnLFxuICAgICAgfSxcbiAgICAgIGRlcGVuZGVuY2llczogW10sXG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogJ1Rlc3QtU3RhY2stQScsXG4gICAgICBuYW1lOiAnVGVzdC1TdGFjay1BJyxcbiAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgIGFjY291bnQ6ICcxMjM0NTY3ODkwMTInLFxuICAgICAgICByZWdpb246ICdiZXJtdWRhLXRyaWFuZ2xlLTEnLFxuICAgICAgICBuYW1lOiAnYXdzOi8vMTIzNDU2Nzg5MDEyL2Jlcm11ZGEtdHJpYW5nbGUtMScsXG4gICAgICB9LFxuICAgICAgZGVwZW5kZW5jaWVzOiBbe1xuICAgICAgICBpZDogJ1Rlc3QtU3RhY2stQycsXG4gICAgICAgIGRlcGVuZGVuY2llczogW10sXG4gICAgICB9XSxcbiAgICB9XSkpO1xuICB9KTtcblxuICB0ZXN0KCdzdGFja3Mgd2l0aCBjaXJjdWxhciBkZXBlbmRlbmNpZXMgc2hvdWxkIGVycm9yIG91dCcsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgY2xvdWRFeGVjdXRhYmxlID0gbmV3IE1vY2tDbG91ZEV4ZWN1dGFibGUoe1xuICAgICAgc3RhY2tzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBzdGFja05hbWU6ICdUZXN0LVN0YWNrLUEnLFxuICAgICAgICAgIHRlbXBsYXRlOiB7IFJlc291cmNlczogeyBUZW1wbGF0ZU5hbWU6ICdUZXN0LVN0YWNrLUEnIH0gfSxcbiAgICAgICAgICBlbnY6ICdhd3M6Ly8xMjM0NTY3ODkwMTIvYmVybXVkYS10cmlhbmdsZS0xJyxcbiAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgJy9UZXN0LVN0YWNrLUEnOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBjeHNjaGVtYS5BcnRpZmFjdE1ldGFkYXRhRW50cnlUeXBlLlNUQUNLX1RBR1MsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZGVwZW5kczogWydUZXN0LVN0YWNrLUInXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHN0YWNrTmFtZTogJ1Rlc3QtU3RhY2stQicsXG4gICAgICAgICAgdGVtcGxhdGU6IHsgUmVzb3VyY2VzOiB7IFRlbXBsYXRlTmFtZTogJ1Rlc3QtU3RhY2stQicgfSB9LFxuICAgICAgICAgIGVudjogJ2F3czovLzEyMzQ1Njc4OTAxMi9iZXJtdWRhLXRyaWFuZ2xlLTEnLFxuICAgICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgICAnL1Rlc3QtU3RhY2stQic6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5cGU6IGN4c2NoZW1hLkFydGlmYWN0TWV0YWRhdGFFbnRyeVR5cGUuU1RBQ0tfVEFHUyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBkZXBlbmRzOiBbJ1Rlc3QtU3RhY2stQSddLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIC8vIEdJVkVOXG4gICAgY29uc3QgdG9vbGtpdCA9IG5ldyBDZGtUb29sa2l0KHtcbiAgICAgIGNsb3VkRXhlY3V0YWJsZSxcbiAgICAgIGNvbmZpZ3VyYXRpb246IGNsb3VkRXhlY3V0YWJsZS5jb25maWd1cmF0aW9uLFxuICAgICAgc2RrUHJvdmlkZXI6IGNsb3VkRXhlY3V0YWJsZS5zZGtQcm92aWRlcixcbiAgICAgIGRlcGxveW1lbnRzOiBjbG91ZEZvcm1hdGlvbixcbiAgICB9KTtcblxuICAgIC8vIFdIRU5cbiAgICBhd2FpdCBleHBlY3QoKCkgPT5cbiAgICAgIGxpc3RTdGFja3MoIHRvb2xraXQsIHsgc2VsZWN0b3JzOiBbJ1Rlc3QtU3RhY2stQScsICdUZXN0LVN0YWNrLUInXSB9KSxcbiAgICApLnJlamVjdHMudG9UaHJvdygnQ291bGQgbm90IGRldGVybWluZSBvcmRlcmluZycpO1xuICB9KTtcbn0pO1xuXG5jbGFzcyBNb2NrU3RhY2sge1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IE1PQ0tfU1RBQ0tfQTogVGVzdFN0YWNrQXJ0aWZhY3QgPSB7XG4gICAgc3RhY2tOYW1lOiAnVGVzdC1TdGFjay1BJyxcbiAgICB0ZW1wbGF0ZTogeyBSZXNvdXJjZXM6IHsgVGVtcGxhdGVOYW1lOiAnVGVzdC1TdGFjay1BJyB9IH0sXG4gICAgZW52OiAnYXdzOi8vMTIzNDU2Nzg5MDEyL2Jlcm11ZGEtdHJpYW5nbGUtMScsXG4gICAgbWV0YWRhdGE6IHtcbiAgICAgICcvVGVzdC1TdGFjay1BJzogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogY3hzY2hlbWEuQXJ0aWZhY3RNZXRhZGF0YUVudHJ5VHlwZS5TVEFDS19UQUdTLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICB9O1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IE1PQ0tfU1RBQ0tfQzogVGVzdFN0YWNrQXJ0aWZhY3QgPSB7XG4gICAgc3RhY2tOYW1lOiAnVGVzdC1TdGFjay1DJyxcbiAgICB0ZW1wbGF0ZToge1xuICAgICAgUmVzb3VyY2VzOiB7XG4gICAgICAgIE15QnVja2V0MToge1xuICAgICAgICAgIFR5cGU6ICdBV1M6OlMzOjpCdWNrZXQnLFxuICAgICAgICAgIFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIEFjY2Vzc0NvbnRyb2w6ICdQdWJsaWNSZWFkJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIERlbGV0aW9uUG9saWN5OiAnUmV0YWluJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBlbnY6ICdhd3M6Ly8xMjM0NTY3ODkwMTIvYmVybXVkYS10cmlhbmdsZS0xJyxcbiAgICBtZXRhZGF0YToge1xuICAgICAgJy9UZXN0LVN0YWNrLUMnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBjeHNjaGVtYS5BcnRpZmFjdE1ldGFkYXRhRW50cnlUeXBlLlNUQUNLX1RBR1MsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0sXG4gIH1cbn1cbiJdfQ==